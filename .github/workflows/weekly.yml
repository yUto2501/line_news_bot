name: Weekly Timetable Broadcast
on:
  schedule:
    - cron: "20 5 * * 5"  # Fri 17:20 JST
    - cron: "30 5 * * 5"  # Fri 17:30 JST
    - cron: "40 5 * * 5"  # Fri 17:40 JST
    - cron: "50 5 * * 5"  # Fri 17:50 JST
    - cron: "0 6 * * 5"   # Fri 18:00 JST
  workflow_dispatch:

jobs:
  warmup_1720:
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '20 5 * * 5'
    runs-on: ubuntu-latest
    env:
      URL: https://line-news-bot-7bh8.onrender.com
      JOB_TOKEN: ${{ secrets.JOB_TOKEN }}
      TO: user:<YOUR_LINE_USER_ID>
    steps:
      - name: Warm until /health=200
        run: |
          for i in {1..15}; do
            code=$(curl -sS -m 20 -w "%{http_code}" -o /dev/null "$URL/health" || echo 000)
            echo "Attempt $i => $code"; [ "$code" = "200" ] && exit 0; sleep 10
          done; exit 1
      - name: Notify (17:20 起動)
        run: |
          MSG="（17:20）サーバを起動しました。18:00に配信予定です。"
          code=$(curl -sS -m 120 -w "%{http_code}" \
            -H "x-job-token: $JOB_TOKEN" \
            "$URL/notify?to=$TO&text=$(python3 - <<'PY'
from urllib.parse import quote; print(quote("（17:20）サーバを起動しました。18:00に配信予定です。"))
PY
)" -o resp.txt || echo 000)
          echo "HTTP $code"; cat resp.txt || true; test "$code" -ge 200 -a "$code" -lt 300

  keepalive_1730:
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '30 5 * * 5'
    runs-on: ubuntu-latest
    env: { URL: https://line-news-bot-7bh8.onrender.com, JOB_TOKEN: ${{ secrets.JOB_TOKEN }}, TO: user:<YOUR_LINE_USER_ID> }
    steps:
      - run: |
          for i in {1..10}; do code=$(curl -sS -m 20 -w "%{http_code}" -o /dev/null "$URL/health"||echo 000); echo "Attempt $i => $code"; [ "$code" = "200" ] && exit 0; sleep 10; done; exit 1
      - run: |
          MSG="（17:30）18:00にニュースを配信します。"
          code=$(curl -sS -m 120 -w "%{http_code}" -H "x-job-token: $JOB_TOKEN" \
            "$URL/notify?to=$TO&text=$(python3 - <<PY
from urllib.parse import quote; print(quote("$MSG"))
PY
)" -o resp.txt || echo 000)
          echo "HTTP $code"; cat resp.txt || true; test "$code" -ge 200 -a "$code" -lt 300

  keepalive_1740:
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '40 5 * * 5'
    runs-on: ubuntu-latest
    env: { URL: https://line-news-bot-7bh8.onrender.com, JOB_TOKEN: ${{ secrets.JOB_TOKEN }}, TO: user:<YOUR_LINE_USER_ID> }
    steps:
      - run: |
          for i in {1..10}; do code=$(curl -sS -m 20 -w "%{http_code}" -o /dev/null "$URL/health"||echo 000); echo "Attempt $i => $code"; [ "$code" = "200" ] && exit 0; sleep 10; done; exit 1
      - run: |
          MSG="（17:40）18:00にニュースを配信します。"
          code=$(curl -sS -m 120 -w "%{http_code}" -H "x-job-token: $JOB_TOKEN" \
            "$URL/notify?to=$TO&text=$(python3 - <<PY
from urllib.parse import quote; print(quote("$MSG"))
PY
)" -o resp.txt || echo 000)
          echo "HTTP $code"; cat resp.txt || true; test "$code" -ge 200 -a "$code" -lt 300

  keepalive_1750:
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '50 5 * * 5'
    runs-on: ubuntu-latest
    env: { URL: https://line-news-bot-7bh8.onrender.com, JOB_TOKEN: ${{ secrets.JOB_TOKEN }}, TO: user:<YOUR_LINE_USER_ID> }
    steps:
      - run: |
          for i in {1..10}; do code=$(curl -sS -m 20 -w "%{http_code}" -o /dev/null "$URL/health"||echo 000); echo "Attempt $i => $code"; [ "$code" = "200" ] && exit 0; sleep 10; done; exit 1
      - run: |
          MSG="（17:50）まもなく18:00にニュースを配信します。"
          code=$(curl -sS -m 120 -w "%{http_code}" -H "x-job-token: $JOB_TOKEN" \
            "$URL/notify?to=$TO&text=$(python3 - <<PY
from urllib.parse import quote; print(quote("$MSG"))
PY
)" -o resp.txt || echo 000)
          echo "HTTP $code"; cat resp.txt || true; test "$code" -ge 200 -a "$code" -lt 300

  at_1800_publish:
    if: github.event_name == 'workflow_dispatch' || github.event.schedule == '0 6 * * 5'
    runs-on: ubuntu-latest
    env:
      URL: https://line-news-bot-7bh8.onrender.com
      JOB_TOKEN: ${{ secrets.JOB_TOKEN }}
    steps:
      - name: Warm until /health=200
        run: |
          for i in {1..15}; do
            code=$(curl -sS -m 20 -w "%{http_code}" -o /dev/null "$URL/health" || echo 000)
            echo "Attempt $i => $code"; [ "$code" = "200" ] && exit 0; sleep 10
          done; exit 1
      - name: Trigger weekly broadcast (18:00 JST)
        run: |
          TARGET="$URL/broadcast-weekly?to=all-groups"
          code=$(curl -sS -m 900 --retry 3 --retry-delay 6 --retry-all-errors \
                 -H "x-job-token: $JOB_TOKEN" \
                 -w "%{http_code}" "$TARGET" -o resp.txt || echo 000)
          echo "HTTP $code"; echo "--- body ---"; cat resp.txt || true; echo "-------------"
          test "$code" -ge 200 -a "$code" -lt 300
